// --------------------
//   the :has selector
// -------------------- 

// select all the p's inside of the class .box
.box:has(p) {
  color: pink;
}

// select the p tag with the class of .p1 inside of the class .box
.box:has(p.p1) {
  color: red;
}

// select only the direct child p's of the class .box
.box:has(> p) {
  color: blue; 
}

// select only the .box that has a div inside of it and then select all the p tags in the div
.box:has(div) p {
  color: purple; 
}

// if body has an input of the class of checkbox and if that checkbox is checked, change the bkg color of the body
body:has(.checkbox:checked) {
  background: #333;
}

// check if my label has a direct sibling that is a valid input (based on your html attribute)
label:has(+ input:valid) {
  color: green;
}

// check if my label has a direct sibling that is a invalid input (based on your html attribute)
label:has(+ input:invalid) {
  color: red;
}

// check if my label has a direct sibling that is a valid input and give it a checkmark before
label:has(+ input:valid)::before {
  content: "\2713";
  margin-right: .25em;
}

// check if my label has a direct sibling that is a invalid input and give it an X before
label:has(+ input:invalid)::before {
  content: "X";
  margin-right: .25em;
}

// select the class of .p1 OR the id of #p2 OR button if it's inside the class .box
.box:has(.p1, #p2, button) {
  background: coral;
} 

// if you try to override this it wont work because of specificity and there is an ID which takes presedence
.box.p1 {
  background: red; // wont work because there was na ID of #p2 styled above which takes presedence cuz it's an ID
}

// && operator is used by using multiple :has() operators chained together:
// select the box that has an id of p2 AND a div inside of it
.box:has(#p2):has(div) {
  background-color: gray;
}
